@page
@model IndexModel
@{
    
    ViewData["Title"] = "Calculator";
}
<link rel="stylesheet" href="~/css/standardCalc.css" />

<div id="functional-container"> <!-- Container for all functional elements pertaining to calculator -->
    <div id="calc-select"> <!-- Divider for containing calculator options-->
        <button class="calc-button" id="standard" href="#">Standard</button>
        <button class="calc-button" id="scientific" href="#">Scientific</button>
        <button class="calc-button" id="programming" href="#">Programming</button>
        <button class="calc-button" id="unit" href="#">Unit Conversion</button>
        <button class="calc-button" id="input-bar" href="#">Input</button>
        <!-- More calculator buttons here -->
    </div>
    <div class="calc-holder">
        <!-- Calculator contents go here,
        would likely need to be adjusted using JS
        depending on selected calculator -->
        <div id="calc-display-back"> <!-- For use in bg styling only -->
            <div id="calc-display"> <!-- Contains result for calculator output --></div> 
        </div>
        <div class="calc-interface">
            <!-- First Row buttons  -->
            <button>(</button>
            <button>)</button>
            <button>AC</button>
            <button>del</button>
            <!-- Second Row buttons  -->
            <button>7</button>
            <button>8</button>
            <button>9</button>
            <button>×</button>
            <!-- Third Row buttons  -->
            <button>4</button>
            <button>5</button>
            <button>6</button>
            <button>-</button>
            <!-- Fourth Row buttons  -->
            <button>1</button>
            <button>2</button>
            <button>3</button>
            <button>+</button>
            <!-- Fifth Row buttons  -->
            <button>.</button>
            <button>0</button>
            <button>=</button>
            <button>÷</button>
        </div>
    </div>
    <div id="hist-select"> <!-- Divider for containing history of all operations-->
    </div>
</div>

<!-- This script handles parsing the math expression to standardize inputs so that users can write more naturally without upsetting NCalc-->
<script>
    function parse_expression(expression){
        const lower_expr = expression.toLowerCase();
        tokens = lower_expr.split(/(\(|\)|sin|cos|tan|pi|\+|\×|-|÷)/)
        console.log("Pre-parse:", {expression})
        const map = {
            "sin": "Sin",
            "cos": "Cos",
            "tan": "Tan",
            "pi": "PI",
            "÷": "/",
            "×": "*"
        };
        const mapped = tokens.map(t => {
            return map[t] !== undefined ? map[t] : t;
        });
        console.log("Parsed:", mapped)
        return mapped.join("")
    }

    //simply add or delete from the display&expression
    function appendToDisplay(value) {
        const displayDiv = document.getElementById("calc-display");
        if (displayDiv) {
            displayDiv.innerHTML += value;
        }
    }

    function deleteFromDisplay() {
        const displayDiv = document.getElementById("calc-display");
        if (displayDiv) {
            displayDiv.innerHTML = displayDiv.innerHTML.slice(0, -1);
        }
    }

    function initDisplay() {
        const displayDiv = document.getElementById("calc-display");
        if (displayDiv) {
            displayDiv.innerHTML = "";
        }
    }


    // preprocess the button click event
    function calcButtonHandler(value) {
        console.log("Button clicked:", value);
        if(value == "del"){
            deleteFromDisplay();
        }
        else if(value == "AC"){
            initDisplay();
        }
        else if(value == "="){
            calcSubmission();
        }
        else if(value == "×"){
            appendToDisplay("×");
        }
        else if(value == "÷"){
            appendToDisplay("÷");
        }
        else {
            appendToDisplay(value);
        }
    }

    // Called when an operation is executed and adds a new HTML history card to the list
    function AddToHistory(result, expression) {
        if ( result !== expression ) {
            const HistoryContainer = document.querySelector('#hist-select');
            HistoryContainer.insertAdjacentHTML("afterbegin", `
                <div class="hist-option">
                    <div class="hist-left">
                    <button class="hist-result">${result}</button>
                    <p class="hist-operation">=${expression}</p>
                    </div>
                    <button class="hist-delete">X</button>
                </div>
                `);
        }
    }
    
    // Functionality to import result from & delete history card
    document.querySelector("#hist-select").addEventListener("click", (event) => {
        const clickedElement = event.target;

        if (clickedElement.classList.contains("hist-result")) {
            const result = clickedElement.textContent;
            calcButtonHandler(result);
        } else if (clickedElement.classList.contains("hist-delete")) {
            const histCard = clickedElement.closest(".hist-option");
            if (histCard) {
                histCard.remove();
            }
        }
    });

    // Check for button press events to input into calculator
    document.addEventListener("keydown", function(e) {
        const key = e.key; 

        const allowedKeys = [
            ..."0123456789",
            ..."+-*/().^!%",
            ..."abcdefghijklmnopqrstuvwxyz",
            ..."ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        ];

        if (key === "Enter") {
            calcButtonHandler("=");
            e.preventDefault();
            return;
        }

        if (key === "Backspace") {
            calcButtonHandler("del");
            e.preventDefault();
            return;
        }

        if(allowedKeys.includes(key)){
            calcButtonHandler(key);
        }

        return;

    });

    // Event delegation for the calculator buttons
    document.addEventListener("DOMContentLoaded", function () {
        const interfaceDiv = document.querySelector(".calc-interface");
        if (interfaceDiv) {
            interfaceDiv.addEventListener("click", function (event) {
                if (event.target.tagName === "BUTTON") {
                    const value = event.target.innerHTML.trim();
                    calcButtonHandler(value);
                }
            });
        }
    });

    // This handles math expression submission
    function calcSubmission() {
        const expr = document.getElementById("calc-display").innerText;
        const parsedExpr = parse_expression(expr);
        console.log(expr);

        fetch("/Index?handler=CalcSubmission", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ name: parsedExpr })
        })
            .then(res => res.json())
            .then(data => {
                if (data.result !== undefined) {
                    document.getElementById("calc-display").innerText = `${data.result}`;
                    @* Add history elements here - Connor *@
                    AddToHistory(`${data.result}`, expr);
                } else {
                    console.log(data.error);
                }
            });
    }
    // handling user pressing enter to start operation
    const inputBox = document.getElementById("calc-display")
    inputBox.addEventListener("keyup", function(event) {
        if (event.key === "Enter") {
            calcSubmission()
        }
    });
</script>
