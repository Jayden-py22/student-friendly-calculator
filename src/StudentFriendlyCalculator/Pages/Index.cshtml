@page
@model IndexModel
@{
    
    ViewData["Title"] = "Home page";
}
<link rel="stylesheet" href="~/css/standardCalc.css" />

<div id="functional-container"> <!-- Container for all functional elements pertaining to calculator -->
    <div id="calc-select"> <!-- Divider for containing calculator options-->
        <button class="calc-button" id="standard" href="#">Standard</button>
        <button class="calc-button" id="scientific" href="#">Scientific</button>
        <button class="calc-button" id="programming" href="#">Programming</button>
        <button class="calc-button" id="unit" href="#">Unit Conversion</button>
        <button class="calc-button" id="input-bar" href="#">Input</button>
        <!-- More calculator buttons here -->
    </div>
    <div class="calc-holder">
        <!-- Calculator contents go here,
        would likely need to be adjusted using JS
        depending on selected calculator -->
        <div id="calc-display"></div> <!-- Contains result for calculator output -->
        <input type="hidden" id="calc-expression" value="" />
        <div class="calc-interface">
            
            <button>(</button>
            <button>)</button>
            <button>AC</button>
            <button>del</button>

            <button>7</button>
            <button>8</button>
            <button>9</button>
            <button>×</button>

            <button>4</button>
            <button>5</button>
            <button>6</button>
            <button>-</button>

            <button>1</button>
            <button>2</button>
            <button>3</button>
            <button>+</button>

            <button>.</button>
            <button>0</button>
            <button>=</button>
            <button>÷</button>
        </div>
    </div>
    <div id="hist-select"> <!-- Divider for containing history of all operations-->
        <div class="hist-option">
            <button class="hist-result">5</button> <!-- Import result of calculation into current bar of calculator, acting like a number button -->
            <p class="hist-operation">= 3 + 2</p>
        </div>
    </div>
</div>

<!-- DEMONSTRATION CONTENT -->
<!-- Basic template code that came from  -->
@* <div class="text-center">
    <h1 class="display-4">Welcome</h1>
    <p>Learn about <a href="https://learn.microsoft.com/aspnet/core">building Web apps with ASP.NET Core</a>.</p>
</div> *@

<!-- DEMONSTRATION CONTENT -->
<!-- Simple input box for demonstration purposes -->
@* <div> 
    <h2>Enter Equation</h2>
    <input type="text" id="CalcSubmission" placeholder="10 x 5" />
    <!--Button press triggers submitName function-->
    <button onclick="calcSubmission()">Submit</button>

    <p id="calcResponse"></p>
</div> *@

<!-- DEMONSTRATION CONTENT -->
<!-- JS for displaying name from input box. -->
<script>
    function parse_experession(expression){
        const lower_expr = expression.toLowerCase();
        tokens = lower_expr.split(/(\(|\)|sin|cos|tan|pi|\+|\×|-|÷)/)

        const map = {
            "sin": "Sin",
            "cos": "Cos",
            "tan": "Tan",
            "pi":  "PI",
            "÷":   "/",
            "×": "*"
        };
        const mapped = tokens.map(t => {
            return map[t] !== undefined ? map[t] : t;
        });
        return mapped.join("")
    }
    // This handles math expression submission
    function calcSubmission() {
        const expr = document.getElementById("calc-display").innerText;
        parsed_expr = parse_expression(expr)
        functionized_expr = functionize_expression(parsed_expr)

        fetch("/Index?handler=CalcSubmission", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ name: functionized_expr })
        })
        .then(res => res.json())
        .then(data => {
            if (data.result !== undefined) {
                document.getElementById("calcResponse").innerText = `Result: ${data.result}`;
            } else {
                document.getElementById("calcResponse").innerText = `Error: ${data.error}`;
            }
        });
    }

    //simply add or delete from the display&expression
    function appendToDisplay(value) {
        const displayDiv = document.getElementById("calc-display");
        if (displayDiv) {
            displayDiv.innerHTML += value;
        }
    }

    function appendToExpression(value) 
    {
        const exprElement = document.getElementById("calc-expression");
        exprElement.value += value;
    }
    function deleteFromDisplay() {
        const displayDiv = document.getElementById("calc-display");
        if (displayDiv) {
            displayDiv.innerHTML = displayDiv.innerHTML.slice(0, -1);
        }
    }

    function deleteFromExpression() {
        const exprElement = document.getElementById("calc-expression");
        exprElement.value = exprElement.value.slice(0, -1);
    }
    function initDisplay() {
        const displayDiv = document.getElementById("calc-display");
        if (displayDiv) {
            displayDiv.innerHTML = "";
        }
    }

    function initExpression() {
        const exprElement = document.getElementById("calc-expression");
        exprElement.value = "";
    }

    // preprocess the button click event
    function calcButtonHandler(value) {
        console.log("Button clicked:", value);
        if(value == "del"){
            deleteFromDisplay();
            deleteFromExpression();
        }
        else if(value == "AC"){
            initDisplay();
            initExpression();
        }
        else if(value == "="){
            calcSubmission();
        }
        else if(value == "×"){
            appendToDisplay("x");
            appendToExpression("*");
        }
        else if(value == "÷"){
            appendToDisplay("÷");
            appendToExpression("/");
        }
        else {
            appendToDisplay(value);
            appendToExpression(value);
        }
    }


    document.addEventListener("keydown", function(e) {
        const key = e.key; 

        const allowedKeys = [
            "0123456789",
            "+","-","*","/","(",")",".", "^", "!", "%",
            "abcdefghijklmnopqrstuvwxyz",
            "ABCDEFGHIJKLMNOPQRSTUVWXYZ"
        ];

        if (key === "Enter") {
            calcButtonHandler("=");
            e.preventDefault();
            return;
        }
        if (key === "Backspace") {
            calcButtonHandler("del");
            e.preventDefault();
            return;
        }
        
        calcButtonHandler(key);
        return;

    });
    // event delegation for the calculator buttons
    document.addEventListener("DOMContentLoaded", function () {
        const interfaceDiv = document.querySelector(".calc-interface");
        if (interfaceDiv) {
            interfaceDiv.addEventListener("click", function (event) {
                if (event.target.tagName === "BUTTON") {
                    const value = event.target.innerHTML.trim();
                    calcButtonHandler(value);
                }
            });
        }
    });

    // This handles math expression submission
    function calcSubmission() {
        const expr = document.getElementById("calc-expression").value;

        fetch("/Index?handler=CalcSubmission", {
            method: "POST",
            headers: {
                "Content-Type": "application/json"
            },
            body: JSON.stringify({ name: expr })
        })
            .then(res => res.json())
            .then(data => {
                if (data.result !== undefined) {
                    document.getElementById("calc-display").innerText = `${data.result}`;
                    document.getElementById("calc-expression").value = `${data.result}`;
                } else {
                    console.log(data.error);
                }
            });
    }
</script>
