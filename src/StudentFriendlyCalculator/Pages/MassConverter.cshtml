@page
@{
    ViewData["Title"] = "Mass Converter";
}
<link rel="stylesheet" href="~/css/site.css" id="core-style" />


<div id="functional-container"> <!-- Container for all functional elements pertaining to calculator -->
    <div id="calc-select"> <!-- Divider for containing calculator options-->
        <button class="calc-button" id="standard" href="#">Standard</button>
        <button class="calc-button" id="scientific"><a asp-area="" asp-page="/ScientificCalc"
                style="text-decoration: none;color: #000000;">Scientific Calculator</a></button>
        <button class="calc-button" id="programming" href="#">Programming</button>
        <button class="calc-button" id="unit" href="#">Unit Conversion</button>
        <button class="calc-button" id="input-bar" href="#">Input</button>
        <!-- More calculator buttons here -->
    </div>
    <div class="calc-holder">
        <select class="unit-select">
            <option value="mass">Mass</option>
        </select>
        <!-- Calculator contents go here,
        would likely need to be adjusted using JS
        depending on selected calculator -->
        <div class="calc-display-back"> <!-- For use in bg styling only -->
            <select id="weights1" class="weights">
                <option value="pound">Pounds</option>
                <option value="gram">Grams</option>
                <option value="kilogram">Kilograms</option>
                <option value="ton">Tons</option>
                <option value="ounce">Ounces</option>
            </select>
            <input id="calc-display" type="number">
        </div>
        <div class="calc-display-back"> <!-- For use in bg styling only -->
            <select id="weights2" class="weights">
                <option value="pound">Pounds</option>
                <option value="gram">Grams</option>
                <option value="kilogram">Kilograms</option>
                <option value="ton">Tons</option>
                <option value="ounce">Ounces</option>
            </select>
            <input id="calc-display2" type="number">
        </div>
    </div>
    <div id="hist-select"> <!-- Divider for containing history of all operations-->
        <button id="clear-hist">Clear History</button>
    </div>
</div>


<script>
    let isUpdating = false;

    function converterSubmission(sourceInputId, targetInputId, sourceUnitId, targetUnitId) {
        if (isUpdating) return;

        const sourceInput = document.getElementById(sourceInputId);
        const targetInput = document.getElementById(targetInputId);
        const sourceValue = parseFloat(sourceInput.value);
        const sourceUnit = document.getElementById(sourceUnitId).value;
        const targetUnit = document.getElementById(targetUnitId).value;

        console.log(`converterSubmission called with:`);
        console.log(`  sourceInputId=${sourceInputId}, targetInputId=${targetInputId}`);
        console.log(`  sourceUnitId=${sourceUnitId}=${sourceUnit}, targetUnitId=${targetUnitId}=${targetUnit}`);
        console.log(`  sourceValue (parsed)=${sourceValue}`);

        if (isNaN(sourceValue)) {
            console.log(`sourceValue is NaN or invalid, clearing target input.`);
            targetInput.value = "";
            return;
        }

        const formData = new URLSearchParams();
        formData.append("FromUnit", sourceUnit);
        formData.append("ToUnit", targetUnit);
        formData.append("Value", sourceValue.toString());  // convert explicitly to string

        console.log(`Sending POST data: ${formData.toString()}`);

        fetch("/MassConverter?handler=ConverterSubmission", {
            method: "POST",
            headers: {
                "Content-Type": "application/x-www-form-urlencoded"
            },
            body: formData.toString()
        })
        .then(res => {
            console.log("Response status:", res.status);
            if (!res.ok) {
                return res.text().then(text => {
                    console.error("Error response body:", text || "<empty>");
                    throw new Error(`HTTP error ${res.status}`);
                });
            }
            return res.json();
        })
        .then(data => {
            console.log("Response JSON data:", data);
            if (data.result !== undefined) {
                isUpdating = true;
                targetInput.value = data.result;
                isUpdating = false;
            } else {
                console.error("Server returned error:", data.error);
            }
        })
        .catch(err => console.error("Fetch failed:", err));
    }

    window.addEventListener("DOMContentLoaded", () => {
        const input1 = document.getElementById("calc-display");
        const input2 = document.getElementById("calc-display2");
        const select1 = document.getElementById("weights1");
        const select2 = document.getElementById("weights2");

        input1.addEventListener("input", () => {
            converterSubmission("calc-display", "calc-display2", "weights1", "weights2");
            console.log("input1 changed");
        });

        input2.addEventListener("input", () => {
            converterSubmission("calc-display2", "calc-display", "weights2", "weights1");
            console.log("input2 changed");
        });

        select1.addEventListener("change", () => {
            converterSubmission("calc-display", "calc-display2", "weights1", "weights2");
            console.log("select1 changed");
        });

        select2.addEventListener("change", () => {
            converterSubmission("calc-display", "calc-display2", "weights1", "weights2");
            console.log("select2 changed");
        });
    });
</script>
